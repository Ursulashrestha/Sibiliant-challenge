;; tests.sibilant
;; Test cases for minimum-rooms function

;; Import the main function
(var minimum-rooms (require "./minimum-rooms"))

;; Test helper function
(def run-test (name meetings expected)
  (do
    (var result (minimum-rooms meetings))
    (if (= result expected)
      (console.log (+ "✓ " name " - PASSED (Expected: " expected ", Got: " result ")"))
      (console.log (+ "✗ " name " - FAILED (Expected: " expected ", Got: " result ")")))))

;; Test execution
(console.log "=== Running Minimum Rooms Tests ===\n")

;; Test Case 1: Empty meetings array
(run-test "Empty meetings" 
          []
          0)

;; Test Case 2: Single meeting
(run-test "Single meeting"
          [{"start" 9 "end" 10}]
          1)

;; Test Case 3: Non-overlapping meetings
(run-test "Non-overlapping meetings"
          [{"start" 9 "end" 10} {"start" 10 "end" 11} {"start" 11 "end" 12}]
          1)

;; Test Case 4: All meetings overlap at the same time
(run-test "All overlapping meetings"
          [{"start" 9 "end" 10} {"start" 9 "end" 10} {"start" 9 "end" 10}]
          3)

;; Test Case 5: Classic example with partial overlaps
(run-test "Partial overlaps"
          [{"start" 0 "end" 30} {"start" 5 "end" 10} {"start" 15 "end" 20}]
          2)

;; Test Case 6: Complex overlapping scenario
(run-test "Complex overlapping"
          [{"start" 7 "end" 10} {"start" 2 "end" 4} {"start" 9 "end" 12} {"start" 1 "end" 3} {"start" 8 "end" 11}]
          3)

;; Test Case 7: Meetings with same start time
(run-test "Same start times"
          [{"start" 9 "end" 10} {"start" 9 "end" 11} {"start" 9 "end" 12}]
          3)

;; Test Case 8: Adjacent meetings (end time = start time)
(run-test "Adjacent meetings"
          [{"start" 1 "end" 5} {"start" 5 "end" 9} {"start" 9 "end" 15}]
          1)

;; Test Case 9: Large dataset with many overlaps
(run-test "Large dataset"
          [{"start" 1 "end" 3} {"start" 2 "end" 4} {"start" 3 "end" 5} 
           {"start" 4 "end" 6} {"start" 5 "end" 7} {"start" 6 "end" 8}
           {"start" 7 "end" 9} {"start" 8 "end" 10}]
          2)

;; Test Case 10: Reverse chronological order input
(run-test "Reverse chronological order"
          [{"start" 15 "end" 20} {"start" 10 "end" 15} {"start" 5 "end" 10} {"start" 0 "end" 5}]
          1)

;; Test Case 11: Random order with heavy overlaps
(run-test "Random order heavy overlaps"
          [{"start" 13 "end" 15} {"start" 1 "end" 13} {"start" 6 "end" 8} 
           {"start" 4 "end" 6} {"start" 2 "end" 14} {"start" 7 "end" 10}]
          4)

;; Test Case 12: Edge case - very short meetings
(run-test "Very short meetings"
          [{"start" 1 "end" 2} {"start" 1 "end" 2} {"start" 2 "end" 3} {"start" 2 "end" 3}]
          2)

(console.log "\n=== Test Summary Complete ===")
(console.log "All tests have been executed!")